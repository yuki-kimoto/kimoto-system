<h2>git branch - ブランチを作成する</h2>

ブランチを作成するには「git branch」コマンドを使用します。

<pre>
git branch ブランチ名
</pre>

<h3>ブランチ名</h3>

ブランチ名には、開発作業がわかる簡潔な名前を付けることをお勧めしています。

商品の変更機能を追加するための開発ブランチの場合の例。

<pre>
git branch goods_update
</pre>

ポイントは、他のブランチと区別ができることと、わかりやすいことです。

大きなプロジェクトの場合は、作業者名が入ったりなど、もう少し長くなるかもしれません。

<h3>ブランチとは何ですか?</h3>

ブランチとは、開発を分岐させることができる機能のことです。たとえば、新しい機能を追加、バグを修正、バージョン2のための保守、などに利用されます。bleadは、ここではメインのブランチで「bread leading(ブレッドの先頭)」という意味だと考えてください。

<pre>
o - o - o - o - o - o - o blead
        |     |
        |     - o - o fix_bug
        |
        - o - o - o - o v2
</pre>

内部実装としては、Gitの場合のブランチとは、単にコミットの先頭への参照のことです。コミットを分岐させることがブランチの作成で、コミットが分岐して伸びていくその先頭がブランチです。

Gitでは、ブランチは参照として作成されるので、ブランチ全体のコピーが発生するということはなく、高速にブランチの作成を行うことができます。

「git branch」を実行した直後は、こんな感じです。

<pre>
# git branch 直後
o - o - o  <- blead
           <- fix_bug
</pre>

ブランチがコピーされることはなく、伸びているoの先頭のコミットIDに、fix_bugという名前が付くだけです。これが、参照という意味です。<a href="https://perlzemi.com/blog/20180214151861.html">Perlのリファレンス</a>や<a href="https://clanguage.perlclub.net/">C言語</a>のポインタを理解していれば、比較的理解しやすいかと思います。

ひとつfix_bugでコミットを進めてみましょう。次のようになります。

<pre>
# fix_bugでコミットを進める

o - o - o   <- blead
        |
        - o <- fix_bug
</pre>

<h3>他のコミットやブランチやタグを元にしてブランチを作成する</h3>

他のコミットIDやブランチやタグを元にしてブランチを作成することもできます。ブランチはリモートブランチでもローカルブランチでもOKです。リモートブランチは単に、リモートリポジトリのブランチという意味です。

<pre>
git branch ブランチ名 元にするブランチ名など
</pre>

他のコミットやブランチやタグを元にしてブランチを作成するサンプルです。

<pre>
# コミットを元にする
git branch new_branch 7e4fd9251ed97e69274121a13d27f75c96ae7c61

# 他のブランチを元にする
git branch new_branch fix_bug

# リモートブランチを元にする
git branch new_branch origin/fix_bug

# タグを元にする
git branch new_branch v2.1
</pre>
